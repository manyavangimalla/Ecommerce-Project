apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce
  labels:
    name: ecommerce
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecommerce-config
  namespace: ecommerce
data:
  DB_HOST: "db-service"
  API_GATEWAY_URL: "http://api-gateway-service:8000"
  PRODUCT_SERVICE_URL: "http://product-inventory-service:8001"
  USER_SERVICE_URL: "http://user-auth-service:8002"
  ORDER_SERVICE_URL: "http://order-payment-service:8003"
  NOTIFICATION_SERVICE_URL: "http://notification-service:8004"
  DEPLOY_ENV: "local" # Toggle between 'local' and 'cloud'
---
apiVersion: v1
kind: Secret
metadata:
  name: ecommerce-secrets
  namespace: ecommerce
type: Opaque
data:
  DB_PASSWORD: cGFzc3dvcmQxMjM=
  JWT_SECRET: c2VjcmV0and0a2V5MTIz
  API_KEY: YXBpa2V5MTIzNDU=
---
# User Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-auth-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-auth-service
  template:
    metadata:
      labels:
        app: user-auth-service
      namespace: ecommerce
    spec:
      containers:
      - name: user-auth-service
        image: user_auth_service:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 8002
---
apiVersion: v1
kind: Service
metadata:
  name: user-auth-service
  namespace: ecommerce
spec:
  selector:
    app: user-auth-service
  ports:
  - port: 8002
    targetPort: 8002
  type: ClusterIP
---
# Product Inventory Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-inventory-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-inventory-service
  template:
    metadata:
      labels:
        app: product-inventory-service
      namespace: ecommerce
    spec:
      containers:
      - name: product-inventory-service
        image: product_inventory_service:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: product-inventory-service
  namespace: ecommerce
spec:
  selector:
    app: product-inventory-service
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP
---
# Order Payment Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-payment-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-payment-service
  template:
    metadata:
      labels:
        app: order-payment-service
      namespace: ecommerce
    spec:
      containers:
      - name: order-payment-service
        image: order_payment_service:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 8003
---
apiVersion: v1
kind: Service
metadata:
  name: order-payment-service
  namespace: ecommerce
spec:
  selector:
    app: order-payment-service
  ports:
  - port: 8003
    targetPort: 8003
  type: ClusterIP
---
# Notification Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
      namespace: ecommerce
    spec:
      containers:
      - name: notification-service
        image: notification_service:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 8004
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: ecommerce
spec:
  selector:
    app: notification-service
  ports:
  - port: 8004
    targetPort: 8004
  type: ClusterIP
---
# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      namespace: ecommerce
    spec:
      containers:
      - name: api-gateway
        image: api_gateway:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: ecommerce
spec:
  selector:
    app: api-gateway
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      namespace: ecommerce
    spec:
      containers:
      - name: frontend
        image: frontend:local # Use local image for local deployment
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: ecommerce
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-ingress
  namespace: ecommerce
  annotations:
    spec.ingressClassName: "nginx" # Use NGINX ingress for local deployment
spec:
  rules:
  - http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
---
# Added StatefulSet and Service for the shared database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ecommerce-db
  namespace: ecommerce
spec:
  serviceName: ecommerce-db
  replicas: 3
  selector:
    matchLabels:
      app: ecommerce-db
  template:
    metadata:
      labels:
        app: ecommerce-db
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: ecommerce_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          value: ecommerce_db
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-db
  namespace: ecommerce
spec:
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None
  selector:
    app: ecommerce-db