apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce
  labels:
    name: ecommerce
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecommerce-config
  namespace: ecommerce
data:
  DB_HOST: "ecommerce-db"
  API_GATEWAY_URL: "http://api-gateway"
  PRODUCT_SERVICE_URL: "http://product-inventory-service"
  USER_SERVICE_URL: "http://user-auth-service"
  ORDER_SERVICE_URL: "http://order-payment-service"
  NOTIFICATION_SERVICE_URL: "http://notification-service"
  DEPLOY_ENV: "local"
---
apiVersion: v1
kind: Secret
metadata:
  name: ecommerce-secrets
  namespace: ecommerce
type: Opaque
data:
  DB_PASSWORD: cGFzc3dvcmQxMjM=
  JWT_SECRET: c2VjcmV0and0a2V5MTIz
  API_KEY: YXBpa2V5MTIzNDU=
---
# User Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-auth-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-auth-service
  template:
    metadata:
      labels:
        app: user-auth-service
      namespace: ecommerce
    spec:
      containers:
      - name: user-auth-service
        image: user_auth_service:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: user-auth-service
  namespace: ecommerce
spec:
  selector:
    app: user-auth-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Product Inventory Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-inventory-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-inventory-service
  template:
    metadata:
      labels:
        app: product-inventory-service
      namespace: ecommerce
    spec:
      containers:
      - name: product-inventory-service
        image: product_inventory_service:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: product-inventory-service
  namespace: ecommerce
spec:
  selector:
    app: product-inventory-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Order Payment Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-payment-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-payment-service
  template:
    metadata:
      labels:
        app: order-payment-service
      namespace: ecommerce
    spec:
      containers:
      - name: order-payment-service
        image: order_payment_service:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: order-payment-service
  namespace: ecommerce
spec:
  selector:
    app: order-payment-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Notification Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
      namespace: ecommerce
    spec:
      containers:
      - name: notification-service
        image: notification_service:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: ecommerce
spec:
  selector:
    app: notification-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      namespace: ecommerce
    spec:
      containers:
      - name: api-gateway
        image: api_gateway:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: ecommerce
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      namespace: ecommerce
    spec:
      containers:
      - name: frontend
        image: frontend:local
        env:
        - name: DEPLOY_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEPLOY_ENV
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.passwordSecret }}
              key: {{ .Values.database.passwordKey }}
        - name: DB_USER
          value: "{{ .Values.database.user }}"
        - name: DB_HOST
          value: "{{ .Values.database.host }}"
        - name: DB_PORT
          value: "{{ .Values.database.port }}"
        - name: DB_NAME
          value: "{{ .Values.database.name }}"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: JWT_SECRET
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: ecommerce
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
# Added StatefulSet and Service for the shared database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ecommerce-db
  namespace: ecommerce
spec:
  serviceName: ecommerce-db
  replicas: 3
  selector:
    matchLabels:
      app: ecommerce-db
  template:
    metadata:
      labels:
        app: ecommerce-db
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: ecommerce_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          value: ecommerce_db
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-db
  namespace: ecommerce
spec:
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None
  selector:
    app: ecommerce-db
---
# NATS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
  namespace: ecommerce
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nats
  template:
    metadata:
      labels:
        app: nats
    spec:
      containers:
      - name: nats
        image: nats:latest
        ports:
        - containerPort: 4222
---
# NATS Service
apiVersion: v1
kind: Service
metadata:
  name: nats
  namespace: ecommerce
spec:
  selector:
    app: nats
  ports:
  - name: client
    port: 4222
    targetPort: 4222
  type: ClusterIP